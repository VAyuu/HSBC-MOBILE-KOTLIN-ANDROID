/* Kotlin File */

var myGlobalVariable:Int = 99
fun main() {
	print("Hello World")
}

fun myFunction() {

}

class MyClass {
}

interface MyInterface {

}





/*Entry Point*/
fun main() {    
	print("Hello World")
}


/*Named Values*/
var name = "kotlin 1.0"
name = "kotlin 1.2"

var name, version


val pi = 3.141


pi = 3.141

val message = StringBuilder("Hello ")
//message = StringBuilder("another")
message.append("World")


/*Warning*/
fun main(args: Array<String>) {
    var myName = "Amit Gulati"
}

fun main() {
    val myName = "Amit Gulati"    
    println(myName)
}


/*Type Inference*/
val greet = "hello"
println(greet)
println(greet::class)
println(greet.javaClass)


/*Explicit Type Annotation*/
var isVisible:Boolean
var velocity:Float
var age:Int
var name:String


//Overflow Detection
var count:Byte = 300
var count:Short=99999

/*Type Conversion*/

var count:Int = 10
var totalCount:Long = count
    
//var totalCount = count.toLong()


/*Type Equality*/

val number1 = 100.6
val number2 = 100.6

val string1 = StringBuffer("Kotlin").toString()
val string2 = StringBuffer("Kotlin").toString()
println(string1 == string2)


val string1 = StringBuffer("Kotlin").toString()
val string2 = string1
println(string1 === string2)

val string1 = StringBuffer("Kotlin").toString()
val string2 = StringBuffer("Kotlin").toString()
println(string1 === string2)


/*String Template*/
val s = "abc"
val str = "$s.length is ${s.length}"



/* Array Type */
val numbers = arrayOf("One", "Two", "Three")
var arr = arrayOf(1, 2, 3, 4)


intArrayOf(1, 2, 3, 4)


/* Nullable Types */
var a: String = "abc"
a = null

var b: String? = "abc"
b = null

var b: String? = "abc"
b = null
val len = if (b != null) b.length else -1


val a = "Kotlin"
val b: String? = null
println(b?.length)
println(a?.length)

//elvis operator
val b: String? = null
val l = b?.length ?: -1



/** FUNCTIONS **/


fun printHello(): Unit {	
	println("Hello!!")
}
printHello()


fun greet(name:String):String {
    return "Hello !! $name"
}

val message = greet("John")
print(message)

fun​ ​max​(numbers: IntArray): Int {
​ 	  ​var​ large = Int.MIN_VALUE
​ 	
​ 	  ​for​ (number ​in​ numbers) {
​ 	    large = ​if​ (number > large) number ​else​ large
​ 	  }
​ 	
​ 	  ​return​ large
​ 	}



/* Single Expression Functions */
fun greet(name:String):String = "Hello !! $name"

fun greet(name:String) = "Hello !! $name"

/* Default Parameter */
fun greet(name: String, msg: String = "Hello"): String = "$msg $name"



/* Named Arguments */
fun createPerson(name:String, age:Int, height:Int, weight:Int){
    println("$name $age $height $weight")
}

createPerson("John", 20, 163, 75)
createPerson(name = "John", age = 20, height = 163, weight = 75)

/* Multiple Return and Destructuring */

fun minMax(numbers:IntArray):Pair<Int, Int> {
    var minNumber:Int = Int.MAX_VALUE
    var maxNumber:Int = Int.MIN_VALUE

    for (number in numbers) {
        if ( number < minNumber ) {
            minNumber = number
        }
        if ( number > maxNumber) {
            maxNumber = number
        }
    }
    return Pair(minNumber, maxNumber)

}

val result = minMax(intArrayOf(100, 34, 99, 20, 5))
println("${result.first}, ${result.second}")



val (min, max) = minMax(intArrayOf(100, 34, 99, 20, 5))
println("$min, $max")


/** CONDITIONAL CODE **/

var max = a
if (a < b) max = b

val max = if (a > b) a else b


val max = if (a > b) {    
	print("Choose a")    
	a
} else {    
	print("Choose b")    
	b
}

var str = "Hello World"
var result = if (str.length < 10) true else false

/* when expression */

var x = 1
when (x) {    
	1 -> print("x == 1")
	2 -> print("x == 2")    
	else -> { 	// Note the block        
				print("x is neither 1 nor 2")    
			}
}


when (x) {
    0, 1 -> print("x == 0 or x == 1")
    else -> print("otherwise")
}

when(temperature) {
        in Float.MIN_VALUE..60.0f -> "Too Cold"
        in 70.0f..Float.MAX_VALUE -> "Too Hot"
        in 60.0f..70.0f -> "Just Right"
        else -> "Not Sure"
}


fun isAlive(alive: Boolean, numberOfLiveNeighbors: Int): Boolean {
    if (numberOfLiveNeighbors < 2) { return false }
    if (numberOfLiveNeighbors > 3) { return false }
    if (numberOfLiveNeighbors == 3) { return true }
    return alive && numberOfLiveNeighbors == 2
}


for (i in 1..4) {
  println(isAlive(true, i))  
}           

for (i in 1..4) {
  println(isAlive(false, i))  
}           


fun isAlive(alive: Boolean, numberOfLiveNeighbors: Int) = when {
    numberOfLiveNeighbors < 2 -> false
    numberOfLiveNeighbors > 3 -> false
    numberOfLiveNeighbors == 3 -> true
    else -> alive && numberOfLiveNeighbors == 2
  }




/* for Loop */

for (i in 1..3) { 
	println(i)
}
	
for (i in 6 downTo 0 step 2) {
    println(i) 
}

val names = arrayOf("Amit", "Raj", "John", "Vijay")

for (name in names) {    	
	println(name)
}


for (i in names.indices) {    	
	println(names[i])
}


for ((index, name) in names.withIndex()) { 	
	println("the element at $index is $name")
}


/* while loop */


/* control flow break, continue */

fun count(name:String, names:Array<String>):Int {
    var counter = 0
    for (n in names) {
    	if (n == name)  {            
        	counter++
        	continue
        }
    }
    return counter
}


fun nameExists(name:String, names:Array<String>):Boolean {
    var exists = false
        for (n in names) {
        	if (n == name)  {
                exists = true
                break
            }    
        }    
    return exists
}


loop@ for (i in 1..100) {
    for (j in 1..100) {
    	if (j % i == 0 ) 
    		break@loop    
    }
}


/** OOP in Kotlin 

**/

class Student {

}



class Student {    
	var firstName:String
	var lastName:String
}

class Student {
    var firstName:String = ""
    var lastName:String = ""
    fun printFullName() {        
    	println("$firstName $lastName")    
    }
}


class Student (firstName:String, lastName:String) {
    var firstName:String = firstName
    var lastName:String = lastName    
    fun printFullName() {
        println("$firstName $lastName")    
    }
}


class Student (firstName:String, lastName:String) {
    var firstName:String = firstName
    var lastName:String = lastName    
    var fullName:String
    init {        
    	fullName = "$firstName $lastName"    
    }
}


class Student (var firstName:String, var lastName:String) {
    var fullName:String
    init {
    	fullName = "$firstName $lastName"
    }
}


/* secondary constructor */
class Student(var firstName:String, var lastName:String) {
    var fullName:String
    var middleName:String = ""
    constructor(firstName:String, middleName:String,lastName:String): this(firstName, lastName) {
    	this.middleName = middleName    
    }
}


